ic.glmnet.p = function (x, y, crit=c("bic","aic","aicc","hqc","eric"),alpha = 1,p=10,...)
{
  if (is.matrix(x) == FALSE) {
    x = as.matrix(x)
  }
  if (is.vector(y) == FALSE) {
    y = as.vector(y)
  }
  crit=match.arg(crit)
  n=length(y)
  model = glmnet(x = x, y = y,alpha = alpha, ...)
  coef = coef(model)
  lambda = model$lambda
  df = model$df
  
  if(alpha==0){
    xs = scale(x)
    I = diag(ncol(x))
    xx = t(xs)%*%xs
    for(i in 1:length(lambda)){
      aux = solve(xx + I*lambda[i])
      df[i] = sum(diag(xs%*%aux%*%t(xs)))
    }
    
    
  }
  
  
  
  yhat=cbind(1,x)%*%coef
  residuals = (y- yhat)
  mse = colMeans(residuals^2)
  sse = colSums(residuals^2)
  
  nvar = df + 1
  bic = n*log(mse)+nvar*log(n)
  aic = n*log(mse)+2*nvar
  aicc = aic+(2*nvar*(nvar+1))/(n-nvar-1)
  hqc = n*log(mse)+2*nvar*log(log(n))
  #setting ERIC parameter nu = 0.5 , and phi=sigma^2 estimated by mse
  eric = n*log(mse)+2*0.5*nvar*log(n*mse/lambda)
  
  sst = (n-1)*var(y)
  r2 = 1 - (sse/sst)
  adjr2 = (1 - (1 - r2) * (n - 1)/(nrow(x) - nvar - 1))
  
  # crit=switch(crit,bic=bic,aic=aic,aicc=aicc,hqc=hqc,eric=eric)
  # 
  # selected=best.model = which(crit == min(crit))
  
  # select smallest lambda such that number of nonzero coefficients is less than or equal to p

  selected=best.model= max(which(df<= p))
  
  ic=c(bic=bic[selected],aic=aic[selected],aicc=aicc[selected],hqc=hqc[selected],eric=eric[selected])
  
  result=list(coefficients=coef[,selected],ic=ic,lambda = lambda[selected], nvar=nvar[selected],
              glmnet=model,residuals=residuals[,selected],fitted.values=yhat[,selected],ic.range=crit, df = df, call = match.call())
  
  class(result)="ic.glmnet"
  return(result)
}

runlasso=function(Y,indice,lag,alpha=1,type="lasso"){
  comp=princomp(scale(Y,scale=FALSE))
  Y2=cbind(Y,comp$scores[,1:4])
  aux=embed(Y2,4+lag)
  y=aux[,indice]
  X=aux[,-c(1:(ncol(Y2)*lag))]  
  
  
  
  if(lag==1){
    X.out=as.matrix(tail(aux,1)[,1:ncol(X), drop=FALSE])  
  }else{
    X.out=aux[,-c(1:(ncol(Y2)*(lag-1)))]
    X.out=tail(X.out,1)[1:ncol(X)]
  }
  
  X.out=as.matrix(tail(aux,1)[,1:ncol(X), drop=FALSE])  # y = y[1:(length(y)-lag+1)]
  # X = X[1:(nrow(X)-lag+1),]
  
  model=ic.glmnet(X,y,alpha = alpha)
  coef=model$coef
  if(type=="adalasso"){
    penalty=(abs(coef[-1])+1/sqrt(length(y)))^(-1)
    model=ic.glmnet(X,y,penalty.factor = penalty,alpha=alpha)
  }
  
  if(type=="fal"){
    taus=c(seq(0.1,1,0.1),1.25,1.5,2,3,4,5,7,10)
    alphas=seq(0,1,0.1)
    bb=Inf
    for(alpha in alphas){
      m0=ic.glmnet(X,y,alpha = alpha)
      coef=m0$coef
      for(tau in taus){
        penalty=(abs(coef[-1])+1/sqrt(length(y)))^(-tau)
        m=ic.glmnet(X,y,penalty.factor = penalty)
        crit=m$bic
        if(crit<bb){
          model=m
          bb=crit
        }
      }
    }
  }
  pred=predict(model,X.out)
  
  return(list("model"=model,"pred"=pred))
}


lasso.rolling.window=function(Y,nprev,indice=1,lag=1,alpha=1,type="lasso"){
  
  save.coef=matrix(NA,nprev,21+ncol(Y[,-1])*4)
  save.pred=matrix(NA,nprev,1)
  for(i in nprev:1){
    window_len <- nrow(Y)-nprev-12; Tplush <- nrow(Y)+1-i ; endwind <- Tplush-lag ;  beginwind <- endwind-window_len ; Y.window=Y[(1+nprev-i):endwind,]
    lasso=runlasso(Y.window,indice,lag,alpha,type)
    save.coef[(1+nprev-i),]=lasso$model$coef
    save.pred[(1+nprev-i),]=lasso$pred
    cat("iteration",(1+nprev-i),"\n")
  }
  
  real=Y[,indice]
  
  #these lines seem pointless, commenting out
  # plot(real,type="l")
  # lines(c(rep(NA,length(real)-nprev),save.pred),col="red")
  
  rmse=sqrt(mean((tail(real,nprev)-save.pred)^2))
  mae=mean(abs(tail(real,nprev)-save.pred))
  
  #median absolute deviation from the median in paper, but not in code
  mad = median(abs(tail(real,nprev)-save.pred - median(tail(real,nprev)-save.pred)))
  
  #mean absolute deviation from  he mean
  mean_ad = mean(abs(tail(real,nprev)-save.pred - mean(tail(real,nprev)-save.pred)))
  
  
  #mean relative absolute error (relative to random walk)
  #last 132 lagged one month values are
  #real[(nrow(dados)-nprev):(nrow(dados)-1)]
  mrae = mean(abs( (tail(real,nprev)-save.pred)/
                     (tail(real,nprev)-real[(nrow(dados)-nprev):(nrow(dados)-1)]  )     ))
  
  #mean absolute scaled error
  #equivalent to mae of method divided by nae of naive forecast
  #first calculate the denomiator
  #mean of vector of length nprev-1
  tempdenom = mean( abs(tail(real,nprev-1) - real[(nrow(dados)-nprev+1):(nrow(dados)-1)]  ) )
  #then the overall measure is
  mase=mae/tempdenom
  
  #mean absolute percentage error
  mape = (100/nprev)*mean(abs((tail(real,nprev)-save.pred)/tail(real,nprev)))
  
  #normalized rmse
  nrmse = rmse/(max(tail(real,nprev))-min(tail(real,nprev)))
  
  #rmse relative to random walk
  
  #rmse of naive rw forecast
  rwrmse=sqrt(mean((tail(real,nprev)-real[(nrow(dados)-nprev):(nrow(dados)-1)])^2))
  
  rmse_rel_rw = rmse/rwrmse
  
  
  errors=c("rmse"=rmse,
           "mae"=mae,
           "mad"=mad,
           "mean_ad"=mean_ad,
           "mrae"=mrae,
           "mase"=mase,
           "mape"=mape,
           "nrmse"=nrmse,
           "rmse_rel_rw"=rmse_rel_rw)
  
  
  return(list("pred"=save.pred,"coef"=save.coef,"errors"=errors))
}


## == ##
runpols=function(Y,indice,lag,coef){
  
  comp=princomp(scale(Y,scale=FALSE))
  Y2=cbind(Y,comp$scores[,1:4])
  aux=embed(Y2,4+lag)
  y=aux[,indice]
  X=aux[,-c(1:(ncol(Y2)*lag))]  
  
  if(lag==1){
    X.out=as.matrix(tail(aux,1)[,1:ncol(X), drop=FALSE])  
  }else{
    X.out=aux[,-c(1:(ncol(Y2)*(lag-1)))]
    X.out=tail(X.out,1)[1:ncol(X)]
  }
  
  respo=X[,which(coef[-1]!=0)]
  if(length(respo)==0){
    model=lm(y ~ 1)
  }else{
    model=lm(y ~ respo)
  }
  
  pred=c(1,X.out[which( (coef[-1]!=0 )  )])[ which( !(is.na(coef(model)) ))]%*%coef(model)[which( !(is.na(coef(model)) ) )]
  
  return(list("model"=model,"pred"=pred))
}


pols.rolling.window=function(Y,nprev,indice=1,lag=1,coef){
  
  save.pred=matrix(NA,nprev,1)
  for(i in nprev:1){
    window_len <- nrow(Y)-nprev-12; Tplush <- nrow(Y)+1-i ; endwind <- Tplush-lag ;  beginwind <- endwind-window_len ; Y.window=Y[(1+nprev-i):endwind,]
    m=runpols(Y.window,indice,lag,coef[(1+nprev-i),])
    save.pred[(1+nprev-i),]=m$pred
    cat("iteration",(1+nprev-i),"\n")
  }
  
  real=Y[,indice]
  
  #these lines seem pointless, commenting out
  # plot(real,type="l")
  # lines(c(rep(NA,length(real)-nprev),save.pred),col="red")
  
  rmse=sqrt(mean((tail(real,nprev)-save.pred)^2))
  mae=mean(abs(tail(real,nprev)-save.pred))
  
  #median absolute deviation from the median in paper, but not in code
  mad = median(abs(tail(real,nprev)-save.pred - median(tail(real,nprev)-save.pred)))
  
  #mean absolute deviation from  he mean
  mean_ad = mean(abs(tail(real,nprev)-save.pred - mean(tail(real,nprev)-save.pred)))
  
  
  #mean relative absolute error (relative to random walk)
  #last 132 lagged one month values are
  #real[(nrow(dados)-nprev):(nrow(dados)-1)]
  mrae = mean(abs( (tail(real,nprev)-save.pred)/
                     (tail(real,nprev)-real[(nrow(dados)-nprev):(nrow(dados)-1)]  )     ))
  
  #mean absolute scaled error
  #equivalent to mae of method divided by nae of naive forecast
  #first calculate the denomiator
  #mean of vector of length nprev-1
  tempdenom = mean( abs(tail(real,nprev-1) - real[(nrow(dados)-nprev+1):(nrow(dados)-1)]  ) )
  #then the overall measure is
  mase=mae/tempdenom
  
  #mean absolute percentage error
  mape = (100/nprev)*mean(abs((tail(real,nprev)-save.pred)/tail(real,nprev)))
  
  #normalized rmse
  nrmse = rmse/(max(tail(real,nprev))-min(tail(real,nprev)))
  
  #rmse relative to random walk
  
  #rmse of naive rw forecast
  rwrmse=sqrt(mean((tail(real,nprev)-real[(nrow(dados)-nprev):(nrow(dados)-1)])^2))
  
  rmse_rel_rw = rmse/rwrmse
  
  
  errors=c("rmse"=rmse,
           "mae"=mae,
           "mad"=mad,
           "mean_ad"=mean_ad,
           "mrae"=mrae,
           "mase"=mase,
           "mape"=mape,
           "nrmse"=nrmse,
           "rmse_rel_rw"=rmse_rel_rw)
  
  #mean prediction interval coverage
  # predint_cov = mean( 1*((save.pred_intervals[,1] < tail(real,nprev))  & (tail(real,nprev) < save.pred_intervals[,2])   ))
  
  #mean prediction interval width
  # predint_width = mean(save.pred_intervals[,2] - save.pred_intervals[,1])
  
  
  
  
  
  
  
  return(list("pred"= save.pred,
              "errors"= errors#,"coef"=save.coef#,
              # "save.pred_intervals"= save.pred_intervals,
              #"save.geweke_bart_testpreds"= save.geweke_bart_testpreds,
              #"save.geweke_bart_sigma"= save.geweke_bart_sigma,
              # "save.importance"= save.importance,
              # "save.pip"= save.pip,
              # "predint_cov"= predint_cov,
              # "predint_width"= predint_width
  ))
}



source("UK/first-sample/functions/rep_Eoghan_newPCAoldstart/func-lasso.R")
# library(devtools)
# install_github("gabrielrvsc/HDeconometrics")

library(HDeconometrics)
load("UK/first-sample/rawdata.rda")
Y=dados

nprev=132
alpha=0.5

## == passado == ##

adaelasticnet1c=lasso.rolling.window(Y,nprev,1,1,alpha,type="adalasso")
adaelasticnet1p=lasso.rolling.window(Y,nprev,2,1,alpha,type="adalasso")
adaelasticnet2c=lasso.rolling.window(Y,nprev,1,2,alpha,type="adalasso")
adaelasticnet2p=lasso.rolling.window(Y,nprev,2,2,alpha,type="adalasso")
adaelasticnet3c=lasso.rolling.window(Y,nprev,1,3,alpha,type="adalasso")
adaelasticnet3p=lasso.rolling.window(Y,nprev,2,3,alpha,type="adalasso")
adaelasticnet4c=lasso.rolling.window(Y,nprev,1,4,alpha,type="adalasso")
adaelasticnet4p=lasso.rolling.window(Y,nprev,2,4,alpha,type="adalasso")
adaelasticnet5c=lasso.rolling.window(Y,nprev,1,5,alpha,type="adalasso")
adaelasticnet5p=lasso.rolling.window(Y,nprev,2,5,alpha,type="adalasso")
adaelasticnet6c=lasso.rolling.window(Y,nprev,1,6,alpha,type="adalasso")
adaelasticnet6p=lasso.rolling.window(Y,nprev,2,6,alpha,type="adalasso")
adaelasticnet7c=lasso.rolling.window(Y,nprev,1,7,alpha,type="adalasso")
adaelasticnet7p=lasso.rolling.window(Y,nprev,2,7,alpha,type="adalasso")
adaelasticnet8c=lasso.rolling.window(Y,nprev,1,8,alpha,type="adalasso")
adaelasticnet8p=lasso.rolling.window(Y,nprev,2,8,alpha,type="adalasso")
adaelasticnet9c=lasso.rolling.window(Y,nprev,1,9,alpha,type="adalasso")
adaelasticnet9p=lasso.rolling.window(Y,nprev,2,9,alpha,type="adalasso")
adaelasticnet10c=lasso.rolling.window(Y,nprev,1,10,alpha,type="adalasso")
adaelasticnet10p=lasso.rolling.window(Y,nprev,2,10,alpha,type="adalasso")
adaelasticnet11c=lasso.rolling.window(Y,nprev,1,11,alpha,type="adalasso")
adaelasticnet11p=lasso.rolling.window(Y,nprev,2,11,alpha,type="adalasso")
adaelasticnet12c=lasso.rolling.window(Y,nprev,1,12,alpha,type="adalasso")
adaelasticnet12p=lasso.rolling.window(Y,nprev,2,12,alpha,type="adalasso")


# pols #
pols.adaelasticnet1c=pols.rolling.window(Y,nprev,1,1,adaelasticnet1c$coef)
pols.adaelasticnet1p=pols.rolling.window(Y,nprev,2,1,adaelasticnet1p$coef)
pols.adaelasticnet2c=pols.rolling.window(Y,nprev,1,2,adaelasticnet2c$coef)
pols.adaelasticnet2p=pols.rolling.window(Y,nprev,2,2,adaelasticnet2p$coef)
pols.adaelasticnet3c=pols.rolling.window(Y,nprev,1,3,adaelasticnet3c$coef)
pols.adaelasticnet3p=pols.rolling.window(Y,nprev,2,3,adaelasticnet3p$coef)
pols.adaelasticnet4c=pols.rolling.window(Y,nprev,1,4,adaelasticnet4c$coef)
pols.adaelasticnet4p=pols.rolling.window(Y,nprev,2,4,adaelasticnet4p$coef)
pols.adaelasticnet5c=pols.rolling.window(Y,nprev,1,5,adaelasticnet5c$coef)
pols.adaelasticnet5p=pols.rolling.window(Y,nprev,2,5,adaelasticnet5p$coef)
pols.adaelasticnet6c=pols.rolling.window(Y,nprev,1,6,adaelasticnet6c$coef)
pols.adaelasticnet6p=pols.rolling.window(Y,nprev,2,6,adaelasticnet6p$coef)
pols.adaelasticnet7c=pols.rolling.window(Y,nprev,1,7,adaelasticnet7c$coef)
pols.adaelasticnet7p=pols.rolling.window(Y,nprev,2,7,adaelasticnet7p$coef)
pols.adaelasticnet8c=pols.rolling.window(Y,nprev,1,8,adaelasticnet8c$coef)
pols.adaelasticnet8p=pols.rolling.window(Y,nprev,2,8,adaelasticnet8p$coef)
pols.adaelasticnet9c=pols.rolling.window(Y,nprev,1,9,adaelasticnet9c$coef)
pols.adaelasticnet9p=pols.rolling.window(Y,nprev,2,9,adaelasticnet9p$coef)
pols.adaelasticnet10c=pols.rolling.window(Y,nprev,1,10,adaelasticnet10c$coef)
pols.adaelasticnet10p=pols.rolling.window(Y,nprev,2,10,adaelasticnet10p$coef)
pols.adaelasticnet11c=pols.rolling.window(Y,nprev,1,11,adaelasticnet11c$coef)
pols.adaelasticnet11p=pols.rolling.window(Y,nprev,2,11,adaelasticnet11p$coef)
pols.adaelasticnet12c=pols.rolling.window(Y,nprev,1,12,adaelasticnet12c$coef)
pols.adaelasticnet12p=pols.rolling.window(Y,nprev,2,12,adaelasticnet12p$coef)


### == juntando tudo ==  ###

cpi=cbind(adaelasticnet1c$pred,adaelasticnet2c$pred,adaelasticnet3c$pred,adaelasticnet4c$pred,
          adaelasticnet5c$pred,adaelasticnet6c$pred,adaelasticnet7c$pred,adaelasticnet8c$pred,
          adaelasticnet9c$pred,adaelasticnet10c$pred,adaelasticnet11c$pred,adaelasticnet12c$pred)

pce=cbind(adaelasticnet1p$pred,adaelasticnet2p$pred,adaelasticnet3p$pred,adaelasticnet4p$pred,
          adaelasticnet5p$pred,adaelasticnet6p$pred,adaelasticnet7p$pred,adaelasticnet8p$pred,
          adaelasticnet9p$pred,adaelasticnet10p$pred,adaelasticnet11p$pred,adaelasticnet12p$pred)


pols.cpi=cbind(pols.adaelasticnet1c$pred,pols.adaelasticnet2c$pred,pols.adaelasticnet3c$pred,pols.adaelasticnet4c$pred,
               pols.adaelasticnet5c$pred,pols.adaelasticnet6c$pred,pols.adaelasticnet7c$pred,pols.adaelasticnet8c$pred,
               pols.adaelasticnet9c$pred,pols.adaelasticnet10c$pred,pols.adaelasticnet11c$pred,pols.adaelasticnet12c$pred)

pols.pce=cbind(pols.adaelasticnet1p$pred,pols.adaelasticnet2p$pred,pols.adaelasticnet3p$pred,pols.adaelasticnet4p$pred,
               pols.adaelasticnet5p$pred,pols.adaelasticnet6p$pred,pols.adaelasticnet7p$pred,pols.adaelasticnet8p$pred,
               pols.adaelasticnet9p$pred,pols.adaelasticnet10p$pred,pols.adaelasticnet11p$pred,pols.adaelasticnet12p$pred)



##
write.table(cpi,"UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet-cpi.csv",sep=";",row.names = FALSE, col.names = FALSE)
write.table(pce,"UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet-pce.csv",sep=";",row.names = FALSE, col.names = FALSE)

write.table(pols.cpi,"UK/forecasts/rep_passado2000_fixed_oldstart/pols-adaelasticnet-cpi.csv",sep=";",row.names = FALSE, col.names = FALSE)
write.table(pols.pce,"UK/forecasts/rep_passado2000_fixed_oldstart/pols-adaelasticnet-pce.csv",sep=";",row.names = FALSE, col.names = FALSE)









### == juntando tudo ==  ###

cpi=cbind(adaelasticnet1c$pred,adaelasticnet2c$pred,adaelasticnet3c$pred,adaelasticnet4c$pred,
          adaelasticnet5c$pred,adaelasticnet6c$pred,adaelasticnet7c$pred,adaelasticnet8c$pred,
          adaelasticnet9c$pred,adaelasticnet10c$pred,adaelasticnet11c$pred,adaelasticnet12c$pred)

pce=cbind(adaelasticnet1p$pred,adaelasticnet2p$pred,adaelasticnet3p$pred,adaelasticnet4p$pred,
          adaelasticnet5p$pred,adaelasticnet6p$pred,adaelasticnet7p$pred,adaelasticnet8p$pred,
          adaelasticnet9p$pred,adaelasticnet10p$pred,adaelasticnet11p$pred,adaelasticnet12p$pred)


##
write.table(cpi,"UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet-cpi.csv",sep=";",row.names = FALSE, col.names = FALSE)
write.table(pce,"UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet--pce.csv",sep=";",row.names = FALSE, col.names = FALSE)

#save all the results, including intervals etc
save(adaelasticnet1c,adaelasticnet2c,adaelasticnet3c,adaelasticnet4c,
     adaelasticnet5c,adaelasticnet6c,adaelasticnet7c,adaelasticnet8c,
     adaelasticnet9c,adaelasticnet10c,adaelasticnet11c,adaelasticnet12c ,
     file = "UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet-all-cpi.Rdata")


adaelasticnet_cpi_list <- list(adaelasticnet1c,adaelasticnet2c,adaelasticnet3c,adaelasticnet4c,
                               adaelasticnet5c,adaelasticnet6c,adaelasticnet7c,adaelasticnet8c,
                               adaelasticnet9c,adaelasticnet10c,adaelasticnet11c,adaelasticnet12c)

save(adaelasticnet_cpi_list ,file =  "UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet-list-cpi.Rdata")


adaelasticnet_pce_list <- list(adaelasticnet1p,adaelasticnet2p,adaelasticnet3p,adaelasticnet4p,
                               adaelasticnet5p,adaelasticnet6p,adaelasticnet7p,adaelasticnet8p,
                               adaelasticnet9p,adaelasticnet10p,adaelasticnet11p,adaelasticnet12p)

save(adaelasticnet_pce_list , file = "UK/forecasts/rep_passado2000_fixed_oldstart/adaelasticnet-list-pce.Rdata")





### == juntando tudo ==  ###

cpi=cbind(pols.adaelasticnet1c$pred,pols.adaelasticnet2c$pred,pols.adaelasticnet3c$pred,pols.adaelasticnet4c$pred,
          pols.adaelasticnet5c$pred,pols.adaelasticnet6c$pred,pols.adaelasticnet7c$pred,pols.adaelasticnet8c$pred,
          pols.adaelasticnet9c$pred,pols.adaelasticnet10c$pred,pols.adaelasticnet11c$pred,pols.adaelasticnet12c$pred)

pce=cbind(pols.adaelasticnet1p$pred,pols.adaelasticnet2p$pred,pols.adaelasticnet3p$pred,pols.adaelasticnet4p$pred,
          pols.adaelasticnet5p$pred,pols.adaelasticnet6p$pred,pols.adaelasticnet7p$pred,pols.adaelasticnet8p$pred,
          pols.adaelasticnet9p$pred,pols.adaelasticnet10p$pred,pols.adaelasticnet11p$pred,pols.adaelasticnet12p$pred)


##
write.table(cpi,"UK/forecasts/rep_passado2000_fixed_oldstart/pols.adaelasticnet-cpi.csv",sep=";",row.names = FALSE, col.names = FALSE)
write.table(pce,"UK/forecasts/rep_passado2000_fixed_oldstart/pols.adaelasticnet--pce.csv",sep=";",row.names = FALSE, col.names = FALSE)

#save all the results, including intervals etc
save(pols.adaelasticnet1c,pols.adaelasticnet2c,pols.adaelasticnet3c,pols.adaelasticnet4c,
     pols.adaelasticnet5c,pols.adaelasticnet6c,pols.adaelasticnet7c,pols.adaelasticnet8c,
     pols.adaelasticnet9c,pols.adaelasticnet10c,pols.adaelasticnet11c,pols.adaelasticnet12c ,
     file = "UK/forecasts/rep_passado2000_fixed_oldstart/pols.adaelasticnet-all-cpi.Rdata")


pols.adaelasticnet_cpi_list <- list(pols.adaelasticnet1c,pols.adaelasticnet2c,pols.adaelasticnet3c,pols.adaelasticnet4c,
                               pols.adaelasticnet5c,pols.adaelasticnet6c,pols.adaelasticnet7c,pols.adaelasticnet8c,
                               pols.adaelasticnet9c,pols.adaelasticnet10c,pols.adaelasticnet11c,pols.adaelasticnet12c)

save(pols.adaelasticnet_cpi_list ,file =  "UK/forecasts/rep_passado2000_fixed_oldstart/pols.adaelasticnet-list-cpi.Rdata")


pols.adaelasticnet_pce_list <- list(pols.adaelasticnet1p,pols.adaelasticnet2p,pols.adaelasticnet3p,pols.adaelasticnet4p,
                               pols.adaelasticnet5p,pols.adaelasticnet6p,pols.adaelasticnet7p,pols.adaelasticnet8p,
                               pols.adaelasticnet9p,pols.adaelasticnet10p,pols.adaelasticnet11p,pols.adaelasticnet12p)

save(pols.adaelasticnet_pce_list , file = "UK/forecasts/rep_passado2000_fixed_oldstart/pols.adaelasticnet-list-pce.Rdata")










